
	    64  32 16 8 4 2 1
6	=        0  0 0 1 1 0
21	=        0  1 0 1 0 1
127	=    1   1  1 1 1 1 1
           +                1
==============================
	  1  0   0  0 0 0 0 0


0	  0000
1	  0001
2	  0010
3	  0011
4	  0100
5	  0101
6	  0110
7	  0111
8	  1000
9	  1001
A	  1010
B	  1011
C	  1100
D	  1101
E	  1110
F	  1111

In C++, C, Java
0xF2EC001C = 1111 0010 1110 1100 0000 0000 0001 1100

772  (decimal)

0771 (base 8 octal)   111 111 001
7*64 + 7 * 8 + 1



0    000
1    001
2    010
3    011
4    100
5    101
6    110
7    111

in unix file permissions
suppose you create file x.txt
ls -l
  rw-r--r--  x.txt

chmod 640 x.txt

A   B    AND     OR	XOR
0   0	 0	 0	0
0   1	 0	 1	1
1   0	 0	 1	1
1   1	 1	 1	0

~0x2D		   NOT


    	 	 ARM
0xF2 & 0x7E	   and
0xF2 | 0x7E	   or
0xF2 ^ 0x7E	   eor



0000 0000 0000 0000 0000 0000 0000 0001
0x00000001   -> NOT 0xFFFFFFFE
0xFEDCBAD9  NOT -->


	    0xABCDEF74  1010 1011 1100 1101 1110 1111 0111 0100
AND	    0x987654AB  1001 1000 0111 0110 0101 0100 1010 1011
	    ==========  =======================================
	    0x88444420  1000 1000 0100 0100 0100 0100 0010 0000

	    0xABCDEF74  1010 1011 1100 1101 1110 1111 0111 0100
OR	    0x987654AB  1001 1000 0111 0110 0101 0100 1010 1011
	    ==========  =======================================
	    0xBBFFFFFF	1011 1011 1111 1111 1111 1111 1111 1111



R0=	    0xABCDEF74  1010 1011 1100 1101 1110 1111 0111 0100
R1=	    0x00000001	0000 0000 0000 0000 0000 0000 0000 0001
AND	    		0000 0000 0000 0000 0000 0000 0000 0000			
			AND r2,r0,r1 @ r2 = either 0 or 1

			MVC R0, R1

r wxrw xrwx		
1 1111 1100		R0 = 0x1FC
1 1100 0100		MOV R1, #0x1C4
       			AND R0,R0,R1

r wxrw xrwx		
1 1010 0100		R0 = 0x1A4
1 1100 0111		R1 = 0x1C7
1 1000 0100		AND R0, R0, R1


1001 x110		R0
0000 1000		OR R0, R0, #0x08

92 x 10 920

R0 = 00000000000000000000100
     00000000000000000001000
     	LSL		R0, #1
	LSL		R0, #3
	LSR

x = y * 8; // x = y << 3;


to select one bit use AND
0101010101010111110000010110100
0000000000000000010000000000000


to set one bit
0101010010101010101010101010010
0000000000000001000000000000000  OR
===============================


power(x, n)
  prod = 1;
  for (i = 1 to n)
    prod = prod * x
  return prod;
end


power(x, 49)

49 = 110001
x^49 = x^1 * x^16 * x^32

power(x, n)
  prod = 1
  while n > 0
    if n is odd    n % 2 != 0
      prod = prod * x
    x = x * x
    n = n / 2    --> LSR 
  end
end

m is a power of 2
n MOD m =  n AND (m-1)



0..31 00000..  11111

32 100000
33 100001
34 100010
35 100011
36 100100


example: set(bits, 33)
bits
bits[0]					bits[1]
00000000 00000000 00000000 00000000    00000000 00000000 00000000 10000010

bits+0	 	  	   	       bits+4

example: set(bits, 39)   39 / 32 = 1	39 mod 32 = 7
